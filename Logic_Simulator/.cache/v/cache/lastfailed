{
  "prelim/vr311/test_mynames.py": true,
<<<<<<< HEAD
  "test_devices.py::test_make_device_gives_errors[(AND1_ID, new_devices.AND, 17)-new_devices.INVALID_QUALIFIER]": true,
  "test_devices.py::test_make_device_gives_errors[(CL_ID, new_devices.CLOCK, 0)-new_devices.INVALID_QUALIFIER]": true,
  "test_devices.py::test_make_device_gives_errors[(CL_ID, new_devices.CLOCK, 10)-new_devices.NO_ERROR]": true,
=======
  "test_devices.py::test_find_devices": true,
  "test_devices.py::test_get_device": true,
  "test_devices.py::test_get_signal_ids": true,
  "test_devices.py::test_get_signal_name": true,
  "test_devices.py::test_make_device": true,
  "test_devices.py::test_make_device_gives_errors[(AND1_ID, new_devices.AND, 17)-new_devices.INVALID_QUALIFIER]": true,
  "test_devices.py::test_make_device_gives_errors[(CL_ID, new_devices.CLOCK, 0)-new_devices.INVALID_QUALIFIER]": true,
  "test_devices.py::test_make_device_gives_errors[(CL_ID, new_devices.CLOCK, 10)-new_devices.NO_ERROR]": true,
  "test_devices.py::test_set_switch": true,
>>>>>>> e2d4f6c1bfaf4ab0cba9a326433220ab203f07a7
  "test_foo.py": true,
  "test_monitors.py::test_display_signals": true,
  "test_monitors.py::test_get_margin": true,
  "test_monitors.py::test_get_signal_names": true,
  "test_monitors.py::test_make_monitor": true,
  "test_monitors.py::test_make_monitor_gives_errors": true,
  "test_monitors.py::test_record_signals": true,
  "test_monitors.py::test_remove_monitor": true,
  "test_monitors.py::test_reset_monitors": true,
  "test_network.py::test_check_network": true,
  "test_network.py::test_execute_non_gates": true,
  "test_network.py::test_execute_non_xor_gates[AND1_ID-switch_outputs0-LOW-devices.AND]": true,
  "test_network.py::test_execute_non_xor_gates[AND1_ID-switch_outputs1-HIGH-devices.AND]": true,
  "test_network.py::test_execute_non_xor_gates[NAND1_ID-switch_outputs2-LOW-devices.NAND]": true,
  "test_network.py::test_execute_non_xor_gates[NAND1_ID-switch_outputs3-HIGH-devices.NAND]": true,
  "test_network.py::test_execute_non_xor_gates[NOR1_ID-switch_outputs6-LOW-devices.NOR]": true,
  "test_network.py::test_execute_non_xor_gates[NOR1_ID-switch_outputs7-HIGH-devices.NOR]": true,
  "test_network.py::test_execute_non_xor_gates[OR1_ID-switch_outputs4-LOW-devices.OR]": true,
  "test_network.py::test_execute_non_xor_gates[OR1_ID-switch_outputs5-HIGH-devices.OR]": true,
  "test_network.py::test_execute_xor": true,
  "test_network.py::test_get_connected_output": true,
  "test_network.py::test_get_input_signal": true,
  "test_network.py::test_get_output_signal": true,
  "test_network.py::test_make_connection": true,
  "test_network.py::test_make_connection_gives_error[(I1, I1, OR1_ID, I2)-network.DEVICE_ABSENT]": true,
  "test_network.py::test_make_connection_gives_error[(OR1_ID, I2, OR1_ID, I2)-network.INPUT_TO_INPUT]": true,
  "test_network.py::test_make_connection_gives_error[(OR1_ID, I2, SW2_ID, None)-network.NO_ERROR]": true,
  "test_network.py::test_make_connection_gives_error[(SW1_ID, I1, OR1_ID, I2)-network.PORT_ABSENT]": true,
  "test_network.py::test_make_connection_gives_error[(SW1_ID, None, OR1_ID, I1)-network.INPUT_CONNECTED]": true,
  "test_network.py::test_make_connection_gives_error[(SW1_ID, None, OR1_ID, None)-network.OUTPUT_TO_OUTPUT]": true,
  "test_network.py::test_make_connection_gives_error[(SW2_ID, None, OR1_ID, I2)-network.NO_ERROR]": true,
  "test_network.py::test_oscillating_network": true,
  "test_parse.py::test_parse_network[circuit1.specfile.txt-True]": true,
  "test_parse.py::test_parse_network[circuit15_specfile.txt-errors0-False]": true,
  "test_parse.py::test_parse_network[circuit1_specfile.txt-True]": true,
  "test_parse.py::test_parse_network[circuit2.specfile.txt-False]": true,
  "test_parse.py::test_parse_network[circuit3_specfile.txt-errors1-False]": true,
  "test_parse.py::test_parse_network[circuit7_specfile.txt-errors0-False]": true,
  "test_parse.py::test_parse_network[circuit8_pecfile.txt-errors0-False]": true,
  "test_scanner.py::test_print_error": true,
  "test_scanner.py::test_remove_comment_raises_exception": true
}